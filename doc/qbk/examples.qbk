[/
    Copyright (c) 2019-2021 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:examples Examples]

Welcome to __Self__ examples. If you are intending to
run the examples, please go through the [link mysql.examples.setup
setup] first.

Here is a list of available examples:

# [link mysql.examples.query_sync Text query, synchronous]
# [link mysql.examples.prepared_statements Prepared statements]
# [link mysql.examples.metadata Metadata]
# [link mysql.examples.unix_socket UNIX sockets]
# [link mysql.examples.query_async_callbacks Text query, async with callbacks]
# [link mysql.examples.query_async_futures Text query, async with futures]
# [link mysql.examples.query_async_coroutines Text query, async with Boost.Coroutine coroutines]
# [link mysql.examples.query_async_coroutinescpp20 Text query, async with C++20 coroutines]
# [link mysql.examples.default_completion_tokens Default completion tokens]
# [link mysql.examples.ssl Setting SSL options]

[section:setup Setup]

All examples assume you have a MySQL server running in localhost.
Examples make use of a database named `boost_mysql_examples`.
The username and password to used are passed using the command
line.

If you're using docker, you can use the `anarthal/mysql:8` container,
which already ships with all the required configuration:

[!teletype]
```
    # If you're on a system supporting UNIX sockets. Note that /var/run/mysqld
    # should be empty for this to work; you can specify a different directory, if it's not
    > docker run -p 3306:3306 -v /var/run/mysqld:/var/run/mysqld -d anarthal/mysql:8

    # If you're on a system that does not support UNIX sockets
    > docker run -p 3306:3306 -d anarthal/mysql:8
```

Please note that this container is just for demonstrative purposes,
and is not suitable for production.

[endsect]

[section:query_sync Text query, synchronous]

This example demonstrates how to connect a [reflink socket_connection],
how to issue a [link mysql.queries text query], and how to
[link mysql.resultsets read a resultset]. It employs synchronous
functions with exceptions as error handling. __see_error_handling__

__assume_setup__

[import ../../example/query_sync.cpp]
[example_query_sync]

[endsect]

[section:prepared_statements Prepared statements]

This example demonstrates how to use [link mysql.prepared_statements
prepared statements]. It employs synchronous functions with
exceptions as error handling. __see_error_handling__

__assume_setup__

[import ../../example/prepared_statements.cpp]
[example_prepared_statements]

[endsect]

[section:metadata Metadata]

This example demonstrates how to use the available
[link mysql.resultsets.metadata metadata] in a [reflink resultset].
It employs synchronous functions with
exceptions as error handling. __see_error_handling__

__assume_setup__

[import ../../example/metadata.cpp]
[example_metadata]

[endsect]

[section:unix_socket UNIX sockets]

This example demonstrates how to establish a connection
to a MySQL server using a UNIX domain socket. The path
to the UNIX socket can be passed in as third parameter
in the command line, and defaults to `/var/run/mysqld/mysqld.sock`,
the default on most systems.

The example employs synchronous functions with
exceptions as error handling. __see_error_handling__

__assume_setup__

[import ../../example/unix_socket.cpp]
[example_unix_socket]

[endsect]

[section:query_async_callbacks Text query, async with callbacks]

This example demonstrates how to connect a [reflink socket_connection],
how to issue a [link mysql.queries text query], and how to
[link mysql.resultsets read a resultset] using
[link mysql.async asynchronous functions] with callbacks.

__assume_setup__

[import ../../example/query_async_callbacks.cpp]
[example_query_async_callbacks]

[endsect]

[section:query_async_futures Text query, async with futures]

This example demonstrates how to connect a [reflink socket_connection],
how to issue a [link mysql.queries text query], and how to
[link mysql.resultsets read a resultset] using
[link mysql.async asynchronous functions] with futures
([asioreflink use_future use_future]).

__assume_setup__

[import ../../example/query_async_futures.cpp]
[example_query_async_futures]

[endsect]

[section:query_async_coroutines Text query, async with Boost.Coroutine coroutines]

This example demonstrates how to connect a [reflink socket_connection],
how to issue a [link mysql.queries text query], and how to
[link mysql.resultsets read a resultset] using
[link mysql.async asynchronous functions] with __Coroutine__ coroutines
(using [asioreflink yield_context yield_context] and
[asioreflink spawn spawn]).

__assume_setup__

[import ../../example/query_async_coroutines.cpp]
[example_query_async_coroutines]

[endsect]

[section:query_async_coroutinescpp20 Text query, async with C++20 coroutines]

This example demonstrates how to connect a [reflink socket_connection],
how to issue a [link mysql.queries text query], and how to
[link mysql.resultsets read a resultset] using
[link mysql.async asynchronous functions] with C++20 coroutines
([asioreflink use_awaitable use_awaitable] and [asioreflink
co_spawn co_spawn]).

__assume_setup__

[import ../../example/query_async_coroutinescpp20.cpp]
[example_query_async_coroutinescpp20]

[endsect]

[section:default_completion_tokens Default completion tokens]

This example demonstrates how to use Boost.Asio's
default completion token functionality with __Self__.
For that purpose, it employs C++20 coroutines.
If you are not familiar with them, look at
[link mysql.examples.query_async_coroutinescpp20 this example]
first.

__assume_setup__

[import ../../example/default_completion_tokens.cpp]
[example_default_completion_tokens]

[endsect]

[section:ssl Setting SSL options]

This example demonstrates how to configure SSL options
like server certificate verification and hostname validation.

The example employs synchronous functions with
exceptions as error handling. __see_error_handling__

__assume_setup__ Additionally, you should run your MySQL server
with some test certificates we created your you, just for this example.
You can find them in this project's GitHub repository, under `BOOST_MYQL_ROOT/tools/ssl`.
If you're using the docker container, the setup has already been done
for you.

[import ../../example/ssl.cpp]
[example_ssl]

[endsect]

[endsect] [/ examples]