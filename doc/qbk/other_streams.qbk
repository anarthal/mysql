[/
    Copyright (c) 2019-2021 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:other_streams UNIX sockets and other stream types]

All I/O objects ([reflink connection], [reflink prepared_statement]
and [reflink resultset]) are templatized on the stream type.
Any object fulfilling the __Stream__ concept may be used
as template argument.

[heading [reflink socket_connection] and [reflink connection]]

There are two types of connection objects: [reflink connection]
and [reflink socket_connection]. The first one is the most basic object,
and requires the passed in stream to just fulfill the __Stream__
requirements. The second derives from the first one and provides
additional functionality, but can only be used on streams
fulfilling the __SocketStream__ requirements.

In general, prefer [reflink socket_connection] over [reflink connection],
as the additional functionality makes establishing and cleaning up
connections easier. In fact, [reflink tcp_ssl_connection] and
[reflink unix_ssl_connection] are really [reflink socket_connection]s.
If you are dealing with a different stream type and you cannot
employ [reflink socket_connection], see [link mysql.other_streams.connection
the section below].

[heading Convinience type aliases]

__Self__ provides helper type aliases for the most common cases:

* [reflink tcp_ssl_connection], [reflink tcp_ssl_prepared_statement] and
  [reflink tcp_ssl_resultset] are alias for the three I/O objects,
  instantiated with `boost::asio::ssl::stream<boost::asio::ip::tcp::socket>`.
  Use them when connecting to MySQL over TCP and using TLS.
* [reflink unix_ssl_connection], [reflink unix_ssl_prepared_statement] and
  [reflink unix_ssl_resultset] are alias for the three I/O objects,
  instantiated with `boost::asio::ssl::stream<boost::asio::local::stream_protocol::socket>`.
  Use them when connecting to MySQL over UNIX sockets and using TLS.
* [reflink tcp_connection], [reflink tcp_prepared_statement] and
  [reflink tcp_resultset] are alias for the three I/O objects,
  instantiated with `boost::asio::ip::tcp::socket`.
  Use them when connecting to MySQL over TCP and not using TLS.
* [reflink unix_connection], [reflink unix_prepared_statement] and
  [reflink unix_resultset] are alias for the three I/O objects,
  instantiated with `boost::asio::local::stream_protocol::socket`.
  Use them when connecting to MySQL over UNIX sockets and using TLS.

Note that the UNIX socket type aliases only exist when the macro
`BOOST_ASIO_HAS_LOCAL_SOCKETS` is defined (i.e. on UNIX systems).

[link mysql.examples.unix_socket This example] employs a UNIX
domain socket to establish a connection to a MySQL server.

[heading:connection Using plain connection objects]

If you are using [reflink connection] objects instead of
[reflink socket_connection]s, you cannot use the convinience
[refmem socket_connection connect] and [refmem socket_connection close]
functions.

Instead, to establish a connection, you should follow these two steps,
roughly equivalent to [refmem socket_connection connect]:

* Connect the underlying stream. You can access it using
  [refmem connection next_layer]. Use whatever connection establishment
  mechanism the stream implements. If you are using TLS, you should *not*
  perform the TLS handshake yourself, as the library will do it as part of the
  MySQL handshake.
* Perform the MySQL handshake by calling [refmem connection handshake]
  or [refmem connection async_handshake]. If the handshake operation
  fails, close the stream.
  
To clean up a connection, follow these two steps,
roughly equivalent to [refmem socket_connection close]:

* Inform the MySQL server that you are quitting the connection
  by calling [refmem connection quit] or [refmem connection async_quit].
  This will also shutdown TLS, if it's being used. 
* Close the underlying stream.


[endsect]